name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  # build-front:
  #   runs-on: ubuntu-latest
  #   container: node:16-alpine
  #   defaults:
  #     run:
  #       working-directory: app
  #   steps:
  #     - name: Install git and rsync ðŸ“š
  #       run: |
  #         apk update && apk add git rsync
  #       working-directory: ../
  #     - name: Configure git to trust the workspace despite the different owner
  #       run: |
  #         git config --global --add safe.directory "$GITHUB_WORKSPACE"
  #         git config --global --add safe.directory /__w/bymagg.github.io/github-pages-deploy-action-temp-deployment-folder
  #       working-directory: ../
  #     - uses: actions/checkout@v2
  #     - name: Install Ionic
  #       run: npm install -g @ionic/cli
  #     - name: Install dependencies
  #       run: npm install
  #     - name: Build Ionic project
  #       run: |
  #         ionic build --prod -- --base-href http://hightracks.me/
  #         cd www
  #         cp index.html 404.html
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: www
  #         path: www/
  #     - name: Deploy ðŸš€
  #       uses: JamesIves/github-pages-deploy-action@v4.2.5
  #       if: contains(github.ref,'refs/heads/master')
  #       with:
  #         branch: gh-pages
  #         folder: app/www
  #         clean: true
  # build-and-push-to-gcr-front:
  #   name: Build & Push to GCR
  #   needs: [build-front]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Authenticate to Google Cloud
  #       id: auth
  #       uses: google-github-actions/auth@v0
  #       with:
  #         credentials_json: '${{ secrets.B64_GCLOUD_SERVICE_ACCOUNT_JSON }}'
  #     - name: Building and pushing the image
  #       uses: RafikFarhad/push-to-gcr-github-action@v5-beta
  #       with:
  #         registry: gcr.io
  #         project_id: ${{ vars.GCLOUD_PROJECT_ID }}
  #         image_name: hightracks-app
  #         image_tag: latest, ${{ github.sha }}
  #         dockerfile: ./app/Dockerfile
  #         context: ./app 
  build-back:
    runs-on: ubuntu-latest
    container: node:16-alpine
    # defaults:
    #     run:
    #       working-directory: api
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install
      - name: Test
        run: npm run test
      - name: Coverage
        uses: mattallty/jest-github-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          test-command: "npm run coverage"
      # - uses: actions/upload-artifact@v2
      #   if: success() || failure() 
      #   with:
      #     name: test-results 
      #     path: ./coverage/test.results.xml
      # - name: Save Code Linting Report JSON
      #   run: npm run lint:json
      #   continue-on-error: true 
      # - name: Annotate Code Linting Results
      #   uses: ataylorme/eslint-annotate-action@1.2.0
      #   with:
      #     repo-token: "${{ secrets.GITHUB_TOKEN }}" 
      #     report-json: "./coverage/eslint-result.json" 
  # build-and-push-to-gcr-back:
  #   name: Build & Push to GCR
  #   needs: [build-back]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Authenticate to Google Cloud
  #       id: auth
  #       uses: google-github-actions/auth@v0
  #       with:
  #         credentials_json: '${{ secrets.B64_GCLOUD_SERVICE_ACCOUNT_JSON }}'
  #     - name: Building and pushing the image
  #       uses: RafikFarhad/push-to-gcr-github-action@v5-beta
  #       with:
  #         registry: gcr.io
  #         project_id: ${{ vars.GCLOUD_PROJECT_ID }}
  #         image_name: hightracks-api
  #         image_tag: latest, ${{ github.sha }}
  #         dockerfile: ./api/Dockerfile
  #         context: ./api
  # deploy:
  #   needs: [build-and-push-to-gcr-back, build-and-push-to-gcr-front]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install SSH Key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         known_hosts: 'un-valor-para-que-no-de-error'
  #     - name: Adding Known Hosts
  #       run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
  #     - name: Deploy
  #       run: |
  #           ssh ubuntu@${{ secrets.SSH_HOST }} "if [ ! -d 'HighTracks' ]; then \
  #               git clone https://github.com/byMagg/HighTracks.git; \
  #             else \
  #               cd HighTracks && git stash && git fetch --all && git reset --hard origin/master && git pull origin master; \
  #             fi"
  #           ssh ubuntu@${{ secrets.SSH_HOST }} "cd HighTracks && echo -e 'MONGODB_URI=${{ vars.MONGODB_URI }}\nCLIENT_ID=${{ secrets.CLIENT_ID }}\nCLIENT_SECRET=${{ secrets.CLIENT_SECRET }}' > .env"
  #           ssh ubuntu@${{ secrets.SSH_HOST }} "cd HighTracks && docker-compose pull && docker-compose up -d --remove-orphans && yes | docker image prune"